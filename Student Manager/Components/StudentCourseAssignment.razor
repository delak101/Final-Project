@using AKSoftware.Blazor.Utilities

@if (IsFormVisible)
{
    <div class="alert alert-secondary" role="alert">
        <h3>Manage Student</h3>
    </div>

    <EditForm Model="studentcourse" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="mb-3">
            <label for="StudentSelect" class="form-label">Name</label>
            <select @onchange="OnStudentSelected" class="form-select form-select-lg mb-3" id="StudentSelect">
                <option value="">-- Select a student --</option>
                @foreach (var student in students)
                {
                    <option value="@student.Id">@student.Name</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="CourseSelect" class="form-label">Select Course: </label>
            <select @onchange="OnCourseSelected" class="form-select form-select-sm" id="CourseSelect">
                <option value="">-- Select a course --</option>
                @foreach (var course in availableCourses)
                {
                    <option value="@course.Id">@course.Name</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
else
{
    <AssignedSuccessfully studentName="@studentName" courseName="@courseName" OnOkClicked="ResetForm" />
}

@code {
    StudentCourse studentcourse = new();
    List<Course> courses = new();
    List<Student> students = new();
    List<Course> availableCourses = new();

    ManagerContext db = new ManagerContext();

    bool IsFormVisible = true;
    string ErrorMessage = string.Empty;

    string studentName = string.Empty;
    string courseName = string.Empty;

    protected override Task OnInitializedAsync()
    {
        courses = db.Courses.ToList();
        students = db.Students.ToList();
        MessagingCenter.Subscribe<AssignedSuccessfully>(this, "ShowFormMsg", (sender) =>
        {
            IsFormVisible = true;
            InvokeAsync(() => StateHasChanged());
        });
        return base.OnInitializedAsync();
    }

    void OnStudentSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var selectedStudentId))
        {
            var assignedCourseIds = db.StudentCourses
                                      .Where(sc => sc.StudentId == selectedStudentId)
                                      .Select(sc => sc.CourseId)
                                      .ToList();
            availableCourses = courses.Where(c => !assignedCourseIds.Contains(c.Id)).ToList();
            
            studentcourse.StudentId = selectedStudentId;
        }
    }

    void OnCourseSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var selectedCourseId))
        {
            studentcourse.CourseId = selectedCourseId;
        }
    }

    void OnValidSubmit()
    {
        var selectedCourse = db.Courses.FirstOrDefault(c => c.Id == studentcourse.CourseId);
        var selectedStudent = db.Students.FirstOrDefault(s => s.Id == studentcourse.StudentId);

        if (selectedCourse == null || selectedStudent == null)
        {
            ErrorMessage = "Invalid student or course selection.";
            return;
        }

        courseName = selectedCourse.Name;
        studentName = selectedStudent.Name;

        studentcourse.Course = selectedCourse;
        studentcourse.Student = selectedStudent;

        db.StudentCourses.Add(studentcourse);
        db.SaveChanges();
        IsFormVisible = false;
    }

    void ResetForm()
    {
        studentcourse = new StudentCourse();
        availableCourses = new List<Course>();
        IsFormVisible = true;
        StateHasChanged();
    }
}
